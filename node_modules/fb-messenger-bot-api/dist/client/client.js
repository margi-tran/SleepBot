/* eslint-disable semi */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Client = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('../util/utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _markSeen = 'mark_seen';
var typingOn = 'typing_on';
var typingOff = 'typing_off';

var textMessagePayload = {
  text: undefined
};

var imageMessagePayload = {
  'attachment': {
    'type': 'image',
    'payload': {
      'is_reusable': true,
      'url': undefined
    }
  }
};

var buttonsMessagePayload = {
  'attachment': {
    'type': 'template',
    'payload': {
      'template_type': 'button',
      'text': undefined,
      'buttons': undefined
    }
  }
};

var genericMessagePayload = {
  'attachment': {
    'type': 'template',
    'payload': {
      'template_type': 'generic',
      'elements': undefined
    }
  }
};

var topElementStyles = ['large', 'compact'];

var listMessagePayload = {
  'attachment': {
    'type': 'template',
    'payload': {
      'template_type': 'list',
      'top_element_style': undefined,
      'elements': undefined,
      'buttons': undefined
    }
  }
};

var quickReplyPayload = {
  'quick_replies': undefined
};

var generateBasicRequestPayload = function generateBasicRequestPayload(id) {
  var options = (0, _utils.deepCopyPayload)(_utils.requestOptions);
  options.url += 'me/messages';
  options.method = 'POST';
  options.json = { recipient: { id: id } };
  return options;
};

var sendDisplayMessage = function sendDisplayMessage(id, payload, requestData, cb) {
  var options = generateBasicRequestPayload(id);
  options.json.message = payload;
  return (0, _utils.sendMessage)(options, requestData, cb);
};

var sendAction = function sendAction(id, payload, requestData, cb) {
  var options = generateBasicRequestPayload(id);
  options.json.sender_action = payload;
  return (0, _utils.sendMessage)(options, requestData, cb);
};

var Client = exports.Client = function () {
  function Client(token, proxyData) {
    _classCallCheck(this, Client);

    this._requestData = {};
    this._requestData.token = token;
    if (proxyData != null) {
      if (Object.prototype.toString.call(proxyData) === '[object Object]' && proxyData.hasOwnProperty('hostname') && proxyData.hasOwnProperty('port')) {
        if (proxyData.hostname.indexOf('http') === 0) {
          this._requestData.proxy = proxyData.hostname + ':' + proxyData.port;
        } else {
          this._requestData.proxy = 'http://' + proxyData.hostname + ':' + proxyData.port;
        }
      } else {
        throw new Error('Invalid Proxy given, expected hostname and port');
      }
    }
  }

  _createClass(Client, [{
    key: 'markSeen',
    value: function markSeen(id, cb) {
      return sendAction(id, _markSeen, this._requestData, cb);
    }
  }, {
    key: 'toggleTyping',
    value: function toggleTyping(id, toggle, cb) {
      var toggleAction = function toggleAction(toggleValue, requestData) {
        if (toggleValue) {
          return sendAction(id, typingOn, requestData, cb);
        } else {
          return sendAction(id, typingOff, requestData, cb);
        }
      };

      if (arguments.length === 3) {
        return toggleAction(toggle, this._requestData);
      } else {
        if (Object.prototype.toString.call(toggle) === '[object Function]') {
          return sendAction(id, typingOff, this._requestData, toggle);
        } else {
          return toggleAction(toggle, this._requestData);
        }
      }
    }
  }, {
    key: 'getUserProfile',
    value: function getUserProfile(id, fieldsArray, cb) {
      var options = (0, _utils.deepCopyPayload)(_utils.requestOptions);
      options.url += id;

      var fields = void 0;
      if (fieldsArray == null) {
        fields = 'first_name';
      } else {
        fields = fieldsArray.join(',');
      }

      options.qs.fields = fields;
      options.method = 'GET';
      return (0, _utils.sendMessage)(options, this._requestData, cb);
    }
  }, {
    key: 'sendTextMessage',
    value: function sendTextMessage(id, text, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(textMessagePayload);
      jsonPayload.text = text;
      return sendDisplayMessage(id, jsonPayload, this._requestData, cb);
    }
  }, {
    key: 'sendImageMessage',
    value: function sendImageMessage(id, imageUrl, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(imageMessagePayload);
      jsonPayload.attachment.payload.url = imageUrl;
      return sendDisplayMessage(id, jsonPayload, this._requestData, cb);
    }
  }, {
    key: 'sendButtonsMessage',
    value: function sendButtonsMessage(id, text, buttons, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(buttonsMessagePayload);
      jsonPayload.attachment.payload.buttons = buttons;
      jsonPayload.attachment.payload.text = text;
      return sendDisplayMessage(id, jsonPayload, this._requestData, cb);
    }
  }, {
    key: 'sendGenericTemplateMessage',
    value: function sendGenericTemplateMessage(id, elements, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(genericMessagePayload);
      jsonPayload.attachment.payload.elements = elements;
      return sendDisplayMessage(id, jsonPayload, this._requestData, cb);
    }
  }, {
    key: 'sendListMessage',
    value: function sendListMessage(id, listElements, firstListElementStyle, finalButtons, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(listMessagePayload);
      jsonPayload.attachment.payload.elements = listElements;
      if (topElementStyles.includes(firstListElementStyle)) {
        jsonPayload.attachment.payload.top_element_style = firstListElementStyle;
      } else {
        jsonPayload.attachment.payload.top_element_style = topElementStyles[0];
      }
      jsonPayload.attachment.payload.buttons = finalButtons;
      return sendDisplayMessage(id, jsonPayload, this._requestData, cb);
    }
  }, {
    key: 'sendQuickReplyMessage',
    value: function sendQuickReplyMessage(id, payload, quickReplies, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(quickReplyPayload);
      var payloadType = typeof payload === 'string' ? 'text' : 'attachment';

      if (payloadType !== 'text') {
        var elements = (0, _utils.deepCopyPayload)(genericMessagePayload);
        elements.attachment.payload.elements = payload;
        payload = elements;
      }

      jsonPayload[payloadType] = payload;
      jsonPayload.quick_replies = quickReplies;

      return sendDisplayMessage(id, jsonPayload, this._requestData, cb);
    }
  }]);

  return Client;
}();