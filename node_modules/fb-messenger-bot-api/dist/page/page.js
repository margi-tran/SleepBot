/* eslint-disable semi */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Page = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('../util/utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Page = function () {
  function Page(pageId, token, proxyData) {
    _classCallCheck(this, Page);

    this._pageId = pageId;
    this._requestData = {};
    this._requestData.token = token;
    if (proxyData != null) {
      if (Object.prototype.toString.call(proxyData) === '[object Object]' && proxyData.hasOwnProperty('hostname') && proxyData.hasOwnProperty('port')) {
        if (proxyData.hostname.indexOf('http') === 0) {
          this._requestData.proxy = proxyData.hostname + ':' + proxyData.port;
        } else {
          this._requestData.proxy = 'http://' + proxyData.hostname + ':' + proxyData.port;
        }
      } else {
        throw new Error('Invalid Proxy given, expected hostname and port');
      }
    }
  }

  _createClass(Page, [{
    key: 'imageUrl',
    value: function imageUrl(_imageUrl) {
      this._url = _imageUrl;
      return this;
    }
  }, {
    key: 'imageCaption',
    value: function imageCaption(_imageCaption) {
      this._caption = _imageCaption;
      return this;
    }
  }, {
    key: 'postMessage',
    value: function postMessage(_postMessage) {
      this._postMessage = _postMessage;
      return this;
    }
  }, {
    key: 'postUrl',
    value: function postUrl(_postUrl) {
      this._postUrl = _postUrl;
      return this;
    }
  }, {
    key: 'sendImage',
    value: function sendImage(cb) {
      var options = (0, _utils.deepCopyPayload)(_utils.requestOptions);
      options.url += this._pageId + '/photos';
      options.method = 'POST';
      options.json = { caption: this._caption, url: this._url };
      return (0, _utils.sendMessage)(options, this._requestData, cb);
    }
  }, {
    key: 'sendPost',
    value: function sendPost(cb) {
      var options = (0, _utils.deepCopyPayload)(_utils.requestOptions);
      options.url += this._pageId + '/feed';
      options.method = 'POST';
      options.json = { message: this._postMessage, link: this._postUrl };
      return (0, _utils.sendMessage)(options, this._requestData, cb);
    }
  }]);

  return Page;
}();

exports.Page = Page;