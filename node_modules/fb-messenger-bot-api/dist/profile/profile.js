/* eslint-disable semi */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Profile = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('../util/utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var greetingSettingPayload = {
  'setting_type': 'greeting',
  'greeting': {
    'text': undefined
  }
};

var getStartedSettingPayload = {
  'setting_type': 'call_to_actions',
  'thread_state': 'new_thread',
  'call_to_actions': [{
    'payload': undefined
  }]
};

var persistentMenuSettingPayload = {
  'setting_type': 'call_to_actions',
  'thread_state': 'existing_thread',
  'persistent_menu': [{
    'locale': 'default',
    'call_to_actions': []
  }]
};

var sendConfigurationMessage = function sendConfigurationMessage(payload, requestData, cb) {
  var options = (0, _utils.deepCopyPayload)(_utils.requestOptions);
  options.url += 'me/thread_settings';
  options.method = 'POST';
  options.json = payload;
  return (0, _utils.sendMessage)(options, requestData, cb);
};

var sendPersistentMenuMessage = function sendPersistentMenuMessage(payload, requestData, cb) {
  var options = (0, _utils.deepCopyPayload)(_utils.requestOptions);
  options.url += 'me/messenger_profile';
  options.method = 'POST';
  options.json = payload;
  return (0, _utils.sendMessage)(options, requestData, cb);
};

var Profile = exports.Profile = function () {
  function Profile(token, proxyData) {
    _classCallCheck(this, Profile);

    this._requestData = {};
    this._requestData.token = token;
    if (proxyData != null) {
      if (Object.prototype.toString.call(proxyData) === '[object Object]' && proxyData.hasOwnProperty('hostname') && proxyData.hasOwnProperty('port')) {
        if (proxyData.hostname.indexOf('http') === 0) {
          this._requestData.proxy = proxyData.hostname + ':' + proxyData.port;
        } else {
          this._requestData.proxy = 'http://' + proxyData.hostname + ':' + proxyData.port;
        }
      } else {
        throw new Error('Invalid Proxy given, expected hostname and port');
      }
    }
  }

  _createClass(Profile, [{
    key: 'setGreetingMessage',
    value: function setGreetingMessage(greetingMessage, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(greetingSettingPayload);
      jsonPayload.greeting.text = greetingMessage;
      return sendConfigurationMessage(jsonPayload, this._requestData, cb);
    }
  }, {
    key: 'setGetStartedAction',
    value: function setGetStartedAction(getStartedPayload, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(getStartedSettingPayload);
      jsonPayload.call_to_actions[0].payload = getStartedPayload;
      return sendConfigurationMessage(jsonPayload, this._requestData, cb);
    }
  }, {
    key: 'setPersistentMenu',
    value: function setPersistentMenu(menuEntries, cb) {
      var jsonPayload = (0, _utils.deepCopyPayload)(persistentMenuSettingPayload);
      jsonPayload.persistent_menu[0].call_to_actions = menuEntries;
      return sendPersistentMenuMessage(jsonPayload, this._requestData, cb);
    }
  }]);

  return Profile;
}();